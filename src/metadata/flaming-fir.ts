const flamingFirMeta = ''

export default flamingFirMeta;